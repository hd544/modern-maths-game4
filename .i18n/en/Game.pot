msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Mon Jun 16 12:43:23 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! üéâ"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings‚Ä¶ üé≠"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! üéâ"
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "Session 2"
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "Let `X` be a type and let `S` and `T` be sets on `X`.\n"
"\n"
"We'll prove that `S ‚à© T = T ‚à© S`.\n"
"\n"
"To make things easier, a proof template has been provided for you.\n"
"\n"
"Firstly, `apply Set.ext` has been used to change the goal of proving `S ‚à© T = T ‚à© S` into `‚àÄ x : X, x ‚àà S ‚à© T ‚Üî x ‚àà T ‚à© S` using the definition of set extensionality.\n"
"\n"
"Secondly, `intros x` has been used to introduce the variable `x : X`.\n"
"\n"
"The new goal is to `show x ‚àà S ‚à© T ‚Üî x ‚àà T ‚à© S`. We do so with a proof by calculation, which has already been set up using the `calc` tactic.\n"
"\n"
"You will need to fill in the red `sorry`s with appropriate tactics or theorems to justify each line of proof.\n"
"\n"
"The `sorry` tactic a really useful way to check if the existing structure of your proof is correct when you're not sure where to go next or how to justify certain lines. This tactic will be available for you in this level and future levels!\n"
"\n"
"The first step in the proof by calculation rewrites `x ‚àà S ‚à© T` using the definition of set intersection. Take a look in the right hand pane to find a tactic or theorem that is used for proving goals of the form `P ‚Üî Q` where `P` and `Q` are definitionally equal. Replace `sorry` with this tactic.\n"
"\n"
"The second step in the proof by calculation uses a theorem to justify the commutativity of and. Find this theorem in the right hand pane and replace the `sorry` with `rw [theorem]`.\n"
"\n"
"The final step in the proof by calculation rewrites `(x ‚àà T) ‚àß (x ‚àà S)` using the definition of set intersection. Take a look in the right hand pane to find a tactic or theorem that is used for proving goals of the form `P ‚Üî Q` where `P` and `Q` are definitionally equal. Replace `sorry` with this tactic."
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "The `calc` tactic is used to write a 'calculation-style' proof."
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "The `rw` tactic is used to rewrite the target or a hypothesis.\n"
"\n"
"If `h` is the name of a theorem `rw [h]` rewrites the target using `h`. For example, if `h` is\n"
"the theroem `a = b`, then `rw [h]` causes every instance of `a` in the target to be replaced with\n"
"`b`."
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "The `intros` tactic is used to introduce variables of any type."
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "Provided with a theorem name and any number of conditions of the theorem, the `apply` tactic is used for opening as many new goals as are necessary to fill in proofs of the remaining conditions of the theorem."
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "The `rfl` tactic is used for proving goals of the form `x = y` where `x` and `y` are definitionally equal. It also proves goals of the form `P ‚Üî Q` if `P` and `Q` are definitionally equal."
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "The `show` tactic is used to state what is being proved. If, for example, the target is to prove `x + y = x + y`, you can indicate and prove this using `show x + y = x + y := from rfl`.\n"
"\n"
"More generally, if the target is to prove `Œ±`, you can close the goal using `show Œ± := T` where `T` is a tactic proof of `Œ±`."
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "The theorem `And.comm` states the commutativity of an `and` statement. For example, it does not matter whether you say `I went to see Jack and Jill` or `I went to see Jill and Jack` - the meaning is still the same."
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "`Template` for internal use"
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "`Hole` for internal use"
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "`sorry` for internal use"
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "The theorem `inter_comm` states the commutativity of the intersection of sets."
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "The definition `Set.ext` is when two sets are extensionally equal. Suppose S and T are sets on a type X.\n"
"If the target is to prove S = T, then using `apply Set.ext` changes the target to `‚àÄ x : X, x ‚àà S ‚Üî x ‚àà T`."
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "Let X be a type and let S and T be sets on X. Prove that S ‚à© T = T ‚à© S."
msgstr ""

#: Game.Levels.PALsessions.L01_session_2
msgid "Well done! You have completed the proof!\n"
"\n"
"Does this proof still not make sense? Ask ProofGuide to explain to you! https://chatgpt.com/g/g-sbJfmQ6te-proof-guide"
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "Session 4"
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "Let f: ‚Ñ§ ‚Üí ‚Ñ§ be the function f(x):= 2x\n"
"\n"
"\n"
"We'll show that the function f is injective."
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "The `intros` tactic is used to introduce variables of any type."
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "The `have` tactic is used to introduce a hypothesis into the context. For example, `have h : x + y = x + y := from rfl,` introduces the hypothesis `h : x + y = x + y` into the context. `have` requires a tactic proof of the claimed result. Here, `from rfl` is a tactic proof of `x + y = x + y`.\n"
"\n"
"More generally, `have h : Œ± := T` introduces `h : Œ±` into the context if `T` is a tactic proof of `Œ±`."
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "The `show` tactic is used to state what is being proved. If, for example, the target is to prove `x + y = x + y`, you can indicate and prove this using `show x + y = x + y := from rfl`.\n"
"\n"
"More generally, if the target is to prove `Œ±`, you can close the goal using `show Œ± := T` where `T` is a tactic proof of `Œ±`."
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "The `linarith` tactic is used to prove many linear equations and inequalities."
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "`sorry` for internal use"
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "`f_injective` is the theorem that the function `f` is injective. In other words, `‚àÄ (x‚ÇÅ x‚ÇÇ : ‚Ñ§), f(x‚ÇÅ) = f(x‚ÇÇ) ‚Üí x‚ÇÅ = x‚ÇÇ`."
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "Let f: ‚Ñ§ ‚Üí ‚Ñ§ be the function f(x):=2x. Prove that f is injective."
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "To prove f is injective we must show `‚àÄ x‚ÇÅ x‚ÇÇ : ‚Ñ§, f x‚ÇÅ = f x‚ÇÇ ‚Üí x‚ÇÅ = x‚ÇÇ`.\n"
"The first step in our English language proof would be to `assume x‚ÇÅ x‚ÇÇ : ‚Ñ§`. The Lean equivalent of `assume` is the tactic `intros` which introduces variables of any type."
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "Type `intros x‚ÇÅ x‚ÇÇ` in the text box and press \"Execute\".\n"
"\n"
"‚ÇÅ and ‚ÇÇ are typed backslash 1 and backlash 2"
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "Our goal has now changed to prove `f x‚ÇÅ = f x‚ÇÇ ‚Üí x‚ÇÅ = x‚ÇÇ`. The next step in our English language proof would be to assume a hypothesis, h. Taking inspiration from above, type the correct tactic and variable into the text box and press \"Execute\"."
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "Type `intros h` in the text box and press \"Execute\"."
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "We now have an assumption `h: f x‚ÇÅ = f x‚ÇÇ` and a new goal to prove `x‚ÇÅ = x‚ÇÇ`. The next step in our English language proof would be to rewrite our hypothesis using the definition of our function. In Lean we use the `have` tactic to do so."
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "Type `have h‚ÇÅ : sorry := h` in the text box, filling in `sorry` with the definition of the function and press \"Execute\".\n"
"\n"
"Use * instead of x for multiplication in Lean."
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "Our goal of x‚ÇÅ = x‚ÇÇ now follows by arithmetic. Explore the definitions of tactics by clicking on the boxes in the right hand pane. Select the tactic that will prove our result by arithmetic, type it in the text box and press \"Execute\"."
msgstr ""

#: Game.Levels.PALsessions.L02_session_4
msgid "Well done! You have completed the proof!\n"
"\n"
"Does this proof still not make sense? Ask ProofGuide to explain to you! https://chatgpt.com/g/g-sbJfmQ6te-proof-guide"
msgstr ""

#: Game.Levels.PALsessions
msgid "PAL sessions"
msgstr ""

#: Game.Levels.PALsessions
msgid "Lean is a fantastic resource that can help you learn how to systematically write proofs. It will double check your answers and remove any of those trivial mistakes that are so easy to make in first year!\n"
"\n"
"You will learn basic Lean skills and proofs through guided PAL sessions.\n"
"\n"
"Click on \"Start\" below to begin."
msgstr ""

#: Game
msgid "Modern Mathematics Game"
msgstr ""

#: Game
msgid "This is an interactive tool aimed at beginning mathematics undergraduates. You'll learn to prove\n"
"theorems online using a computer programme called Lean.\n"
"\n"
"Each chapter is represented by a coloured circular button in the right-hand pane. Blue indicates your\n"
"current position, green is for completed chapters, and grey is for unread or incomplete chapters.\n"
"\n"
"At every stage in a proof, there is a *target*, the thing you want to prove, and a *context*, the\n"
"set of things you have already proved or assumed at the beginning of your argument.\n"
"The target and context change throughout the proof.\n"
"\n"
"The word *goal* is used to refer variously to the target or to the combination of target and context.\n"
"\n"
"You'll use *tactics* to modify the goal until you have proved the target (called 'closing the goal').\n"
"Each tactic may invoke one or more *theorems*."
msgstr ""

#: Game
msgid "This game is part of the [exlean](https://exlean.org/) project."
msgstr ""

#: Game
msgid "Modern Maths Game"
msgstr ""

#: Game
msgid "Modern Mathematics Game"
msgstr ""
